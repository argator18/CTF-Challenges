import pwn
import math
from collections import Counter

n = None
p = None
b = None
nbits = 2048
cnt = 0
leak = None

def guess(x):
    global cnt
    cnt += 1
    print(cnt , end = '\r')
    p.sendlineafter(b'>', ",".join(map(str, x)).encode())
    return int(p.recvline())

def input_(*s):
    print(s)
    input()

def output(target,final,n):
    final = bin(final)[2:].rjust(n,'0')
    if not stop :
        print(target)
        print(final)
    if target == final:
        print("you did it")

stop = False
def _input():
    global stop
    if stop:
        return ""
    inp = input()
    if inp =="c":
        stop = True
        return ""
    return inp
def get_sum(x = [1,1,1,1]):
    # n = 0b (up+1) (up) ... (0)
    # n >> i = 0b (up+1) ... (i)

    up = int(math.log2(n))-1
    n_len = len(bin(n)) -2
    
    # get res[up+1]
    res = guess(x) 
    if res < b:
        print("mmh")
        exit()
    else:
        final = res >> (up+1)
    #target = bin(leak)[2:].rjust(n_len,'0')
    #output(target,final,1)

    for j in range(up+1):
        # res = tar + b
        res = guess(x) 

        res = (res - (final << (up+1))) %n
        up_bit = res >> up

        if up_bit == 3:
            print("hÃ¤")
            exit()
        if up_bit == 2:
            up_bit = 1
        #output(target,final,j+1)
        #if _input() != "":
        #    print(bin(res),up)
        final = (final << 1) | (up_bit)

        # get next bit of result
        for i  in range(len(x)):
            x[i] *= 2
    #output(target,final,up+2)
    return final

def main():
    global p, n, cnt, leak, b
    #p = pwn.remote("localhost", 1024)
    p = pwn.remote("lwe2048.challs.open.ecsc2024.it",38018)

    p.recvline()
#s4 = int(p.recvline().split(b',')[-1][1:-2].decode('utf-8'))
    #leak = int(p.recvline()[:-1])
    n = int(p.recvline().split(b'The modulus is ')[1])
    b = n // (3 * nbits)
    print("n",hex(n))

    cnt = 0
    shift = 2048 - 10
    mask = (1 << 2048) - (1 << shift)

    sum_4 = get_sum()
    #if leak != sum_4:
    #    print("leak",hex(leak))
    #    print("sum:", hex(sum_4))

    s1 = get_sum([2,1,1,1])
    s1 = (s1 - sum_4) %n
    #print("s1",hex(s1))
    #if leak != s1:
    #    print("leak",hex(leak))
    #    print("sum:", hex(s1))
    #exit()

    s2 = get_sum([1,2,1,1])
    s2 = (s2 - sum_4) %n
    #print("s2",hex(s2))

    s3 = get_sum([1,1,2,1])
    s3 = (s3 - sum_4) %n
    #print("s3",hex(s3))

#s4 = get_sum([1,1,1,2])
#s4 = (s4 - sum_4) %n
    s4 = (sum_4 - s1 -s2 -s3 ) %n
    #print("s4",hex(s4))

    for i in range(cnt,10000):
        #print(i,end = "\r")
        guess([1,1,1,1])
    gues = f'{s1},{s2},{s3},{s4}'.encode()
    p.sendlineafter(b'guess? ', gues)
main()
output = p.recvall(1)
print(output)
while not b'flag' in output:
    main()
    output = p.recvall(1)
    print(output.decode('utf-8'))
print(output.decode('utf-8'))
exit()
print(hex((s4%n)>>shift))

print(hex(get_s4(0)>>shift))
