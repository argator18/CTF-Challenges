import itertools
from Crypto.Util.number import getPrime, isPrime, long_to_bytes
from Crypto.Util.Padding import unpad
from Crypto.Cipher import AES
from hashlib import sha256
import binascii


p = 1355355364004890192684721446349578900646504890139
gb = 584831915461228385996440377063752221771727380254
shared = 162919707400627173868963852117274142412086416652
enc_flag = '38d2d283f443902074250c4394a0c63f02b15f45b38820f69a65948832f285b77cdba166bc3379ad99c466970c98eaf760ae0298f0dcd7417cb8fa13144e7bd991784c86224171bf138e1eadb84466e2'

digits = [1, -9]


# we know that a has 39 decimal digits
combinations = itertools.product(digits, repeat=39)

# Convert combinations to a list if needed (Warning: this will be very large!)
# all_combinations = list(combinations)

def generate_combinations(n):
    # Start with all 1s
    base_array = [1] * n
    yield base_array

    # Generate combinations with increasing numbers of -9s
    for k in range(1, n + 1):
        for indices in itertools.combinations(range(n), k):
            array = base_array[:]
            for index in indices:
                array[index] = -9
            yield array

combinations = generate_combinations(39)




#delta_digits_a
for i, dda in enumerate(combinations):
    print(i, end = '\r')
    diff_a = 0
    for k,d in enumerate(reversed(dda)):
        diff_a += pow(10,k) * d
    shared_tmp = pow(gb,diff_a,p)
    shared_tmp = (shared * shared_tmp) % p
    
    key = sha256(long_to_bytes(shared_tmp)).digest()
    cipher = AES.new(key, AES.MODE_ECB)

    flag = binascii.unhexlify(enc_flag)
    try:
        decrypted_flag = unpad(cipher.decrypt(flag), AES.block_size)
        if b'open' in decrypted_flag:
            print(decrypted_flag)
            break
    except:
        continue


