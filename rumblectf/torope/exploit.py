import pwn
from Crypto.Cipher import AES
import base64
from base64 import b64decode
import json
import util
from Crypto.PublicKey import ECC
from modclient import Client


host = "torope.rumble.host"
port = 9373

#host = "localhost"
#port = 1024
p = pwn.remote(host,port)

def unwrap(msg):
    message_parsed = util.deserialize_dataclass(None,msg)
    #print("msp: ",message_parsed)
    message_parsed = util.deserialize_dataclass(None,message_parsed[0])
    return message_parsed

def get(obj, attr):
    return util.deserialize_dataclass(None, "\"" + obj[attr] + "\"")

def retr(keyword):
    return bytes.fromhex(p.recvline().split(keyword)[1].decode('utf-8'))

def parse_initial():
    password = retr(b'password: ')
    message = retr(b'message: ')
    message_parsed = unwrap(message)
    typ = message_parsed['type']
    ephemeral_key = get(message_parsed,'ephemeral_pk')
    return (password, message, ephemeral_key)

def send_server(msg):
    p.sendlineafter(b'> ',b's')
    print("send msg" ,msg)
    p.sendlineafter(b'> ',msg.hex().encode())
    if input('a') != "":
        return bytes.fromhex(p.recvline().split(b"planted: ")[1].decode('utf-8'))
        #print(p.recvall(1).decode('utf-8'))
        #print("unencrypted:", p.recvline())
    #print("parsed obj:",p.recvline())
    return retr(b'Response: ')


def send_client(msg):
    p.sendlineafter(b'> ',b'c')
    p.sendlineafter(b'> ',msg.hex().encode())
    return retr(b'Response: ')

def send_client_hello(ephemeral_key):
    tmp = "{" + f'"type: 1, "ephemeral_pk": "BASE64:{base64.b64encode(ephemeral_key)}"' + "}"
    send_server(f"[\"BASE64:{base64.b64encode(tmp.encode())}\"]".encode())


user_password , client_hello, client_pk = parse_initial()

#ephemeral_key = ECC.generate(curve='p256')
#resp = send_client_hello(ephemeral_key.public_key().export_key(format='raw'))

#sh: ServerHello = deserialize_dataclass(ServerHello, resp)
#eph_pk = ECC.import_key(encoded=sh.ephemeral_pk, curve_name='p256')
#pms = key_agreement(eph_priv=ephemeral_key, eph_pub=eph_pk, kdf=kdf)




client = Client(user_password.hex())
#resp = str(unwrap(send_server(client.generate_initial_message()))).replace("'", "\"")
#send_server(client.handle_message(resp))
send_server(client.create_server_auth())

#print(client_hello)
server_hello = send_server(client_hello)
auth_and_ss = send_client(server_hello)
ss = str([json.loads(auth_and_ss.decode('utf-8'))[1]]).replace("'","\"").encode()
start_service = send_server(ss)
print(util.deserialize_dataclass(None,start_service))
plant_flag = send_client(start_service)
resp = send_server(plant_flag)
nonce = resp[:12]
flag = resp[12:]

aes = AES.new(bytes.fromhex(client.password), nonce=nonce, mode=AES.MODE_CTR)
print(aes.decrypt(flag))



exit()



# 1.
password, message = parse_initial()
#print("\nmessage from C: ",unwrap(message),'\n')
# 1.
resp = send_server(message)
#print("\nresponse from S: ",unwrap(resp), '\n')

# 2.
resp = send_client(resp)

# 3.4.
resp = send_server(resp)

# 5.
resp = send_client(resp)

# 6.
resp = send_server(resp)

# encrypted from now
#print(unwrap(resp))

resp = send_server(resp)
print(resp)

receiver = b"receiver"
receiver = b"hkhjhkjhghjghglj768t["
p.sendlineafter(b'>',receiver)
msgs = b'"uhuuu"'
p.sendlineafter(b'> ',msgs.hex().encode())
print(p.recvall(3).decode())
